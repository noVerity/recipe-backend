// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"adomeit.xyz/recipe/ent/ingredient"
	"adomeit.xyz/recipe/ent/predicate"
	"adomeit.xyz/recipe/ent/recipe"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RecipeUpdate is the builder for updating Recipe entities.
type RecipeUpdate struct {
	config
	hooks    []Hook
	mutation *RecipeMutation
}

// Where appends a list predicates to the RecipeUpdate builder.
func (ru *RecipeUpdate) Where(ps ...predicate.Recipe) *RecipeUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetSlug sets the "slug" field.
func (ru *RecipeUpdate) SetSlug(s string) *RecipeUpdate {
	ru.mutation.SetSlug(s)
	return ru
}

// SetName sets the "name" field.
func (ru *RecipeUpdate) SetName(s string) *RecipeUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetIngredientslist sets the "ingredientslist" field.
func (ru *RecipeUpdate) SetIngredientslist(s string) *RecipeUpdate {
	ru.mutation.SetIngredientslist(s)
	return ru
}

// SetInstructions sets the "instructions" field.
func (ru *RecipeUpdate) SetInstructions(s string) *RecipeUpdate {
	ru.mutation.SetInstructions(s)
	return ru
}

// SetNutrition sets the "nutrition" field.
func (ru *RecipeUpdate) SetNutrition(s string) *RecipeUpdate {
	ru.mutation.SetNutrition(s)
	return ru
}

// SetUser sets the "user" field.
func (ru *RecipeUpdate) SetUser(s string) *RecipeUpdate {
	ru.mutation.SetUser(s)
	return ru
}

// SetServings sets the "servings" field.
func (ru *RecipeUpdate) SetServings(i int) *RecipeUpdate {
	ru.mutation.ResetServings()
	ru.mutation.SetServings(i)
	return ru
}

// AddServings adds i to the "servings" field.
func (ru *RecipeUpdate) AddServings(i int) *RecipeUpdate {
	ru.mutation.AddServings(i)
	return ru
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by IDs.
func (ru *RecipeUpdate) AddIngredientIDs(ids ...int) *RecipeUpdate {
	ru.mutation.AddIngredientIDs(ids...)
	return ru
}

// AddIngredients adds the "ingredients" edges to the Ingredient entity.
func (ru *RecipeUpdate) AddIngredients(i ...*Ingredient) *RecipeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.AddIngredientIDs(ids...)
}

// Mutation returns the RecipeMutation object of the builder.
func (ru *RecipeUpdate) Mutation() *RecipeMutation {
	return ru.mutation
}

// ClearIngredients clears all "ingredients" edges to the Ingredient entity.
func (ru *RecipeUpdate) ClearIngredients() *RecipeUpdate {
	ru.mutation.ClearIngredients()
	return ru
}

// RemoveIngredientIDs removes the "ingredients" edge to Ingredient entities by IDs.
func (ru *RecipeUpdate) RemoveIngredientIDs(ids ...int) *RecipeUpdate {
	ru.mutation.RemoveIngredientIDs(ids...)
	return ru
}

// RemoveIngredients removes "ingredients" edges to Ingredient entities.
func (ru *RecipeUpdate) RemoveIngredients(i ...*Ingredient) *RecipeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ru.RemoveIngredientIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecipeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecipeUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecipeUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecipeUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RecipeUpdate) check() error {
	if v, ok := ru.mutation.Slug(); ok {
		if err := recipe.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Recipe.slug": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Name(); ok {
		if err := recipe.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Recipe.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Servings(); ok {
		if err := recipe.ServingsValidator(v); err != nil {
			return &ValidationError{Name: "servings", err: fmt.Errorf(`ent: validator failed for field "Recipe.servings": %w`, err)}
		}
	}
	return nil
}

func (ru *RecipeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recipe.Table,
			Columns: recipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: recipe.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldSlug,
		})
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldName,
		})
	}
	if value, ok := ru.mutation.Ingredientslist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldIngredientslist,
		})
	}
	if value, ok := ru.mutation.Instructions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldInstructions,
		})
	}
	if value, ok := ru.mutation.Nutrition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldNutrition,
		})
	}
	if value, ok := ru.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldUser,
		})
	}
	if value, ok := ru.mutation.Servings(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recipe.FieldServings,
		})
	}
	if value, ok := ru.mutation.AddedServings(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recipe.FieldServings,
		})
	}
	if ru.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.IngredientsTable,
			Columns: recipe.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ingredient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedIngredientsIDs(); len(nodes) > 0 && !ru.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.IngredientsTable,
			Columns: recipe.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ingredient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.IngredientsTable,
			Columns: recipe.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ingredient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RecipeUpdateOne is the builder for updating a single Recipe entity.
type RecipeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RecipeMutation
}

// SetSlug sets the "slug" field.
func (ruo *RecipeUpdateOne) SetSlug(s string) *RecipeUpdateOne {
	ruo.mutation.SetSlug(s)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RecipeUpdateOne) SetName(s string) *RecipeUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetIngredientslist sets the "ingredientslist" field.
func (ruo *RecipeUpdateOne) SetIngredientslist(s string) *RecipeUpdateOne {
	ruo.mutation.SetIngredientslist(s)
	return ruo
}

// SetInstructions sets the "instructions" field.
func (ruo *RecipeUpdateOne) SetInstructions(s string) *RecipeUpdateOne {
	ruo.mutation.SetInstructions(s)
	return ruo
}

// SetNutrition sets the "nutrition" field.
func (ruo *RecipeUpdateOne) SetNutrition(s string) *RecipeUpdateOne {
	ruo.mutation.SetNutrition(s)
	return ruo
}

// SetUser sets the "user" field.
func (ruo *RecipeUpdateOne) SetUser(s string) *RecipeUpdateOne {
	ruo.mutation.SetUser(s)
	return ruo
}

// SetServings sets the "servings" field.
func (ruo *RecipeUpdateOne) SetServings(i int) *RecipeUpdateOne {
	ruo.mutation.ResetServings()
	ruo.mutation.SetServings(i)
	return ruo
}

// AddServings adds i to the "servings" field.
func (ruo *RecipeUpdateOne) AddServings(i int) *RecipeUpdateOne {
	ruo.mutation.AddServings(i)
	return ruo
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by IDs.
func (ruo *RecipeUpdateOne) AddIngredientIDs(ids ...int) *RecipeUpdateOne {
	ruo.mutation.AddIngredientIDs(ids...)
	return ruo
}

// AddIngredients adds the "ingredients" edges to the Ingredient entity.
func (ruo *RecipeUpdateOne) AddIngredients(i ...*Ingredient) *RecipeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.AddIngredientIDs(ids...)
}

// Mutation returns the RecipeMutation object of the builder.
func (ruo *RecipeUpdateOne) Mutation() *RecipeMutation {
	return ruo.mutation
}

// ClearIngredients clears all "ingredients" edges to the Ingredient entity.
func (ruo *RecipeUpdateOne) ClearIngredients() *RecipeUpdateOne {
	ruo.mutation.ClearIngredients()
	return ruo
}

// RemoveIngredientIDs removes the "ingredients" edge to Ingredient entities by IDs.
func (ruo *RecipeUpdateOne) RemoveIngredientIDs(ids ...int) *RecipeUpdateOne {
	ruo.mutation.RemoveIngredientIDs(ids...)
	return ruo
}

// RemoveIngredients removes "ingredients" edges to Ingredient entities.
func (ruo *RecipeUpdateOne) RemoveIngredients(i ...*Ingredient) *RecipeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ruo.RemoveIngredientIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RecipeUpdateOne) Select(field string, fields ...string) *RecipeUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Recipe entity.
func (ruo *RecipeUpdateOne) Save(ctx context.Context) (*Recipe, error) {
	var (
		err  error
		node *Recipe
	)
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecipeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecipeUpdateOne) SaveX(ctx context.Context) *Recipe {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecipeUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecipeUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RecipeUpdateOne) check() error {
	if v, ok := ruo.mutation.Slug(); ok {
		if err := recipe.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Recipe.slug": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Name(); ok {
		if err := recipe.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Recipe.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Servings(); ok {
		if err := recipe.ServingsValidator(v); err != nil {
			return &ValidationError{Name: "servings", err: fmt.Errorf(`ent: validator failed for field "Recipe.servings": %w`, err)}
		}
	}
	return nil
}

func (ruo *RecipeUpdateOne) sqlSave(ctx context.Context) (_node *Recipe, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recipe.Table,
			Columns: recipe.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: recipe.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Recipe.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, recipe.FieldID)
		for _, f := range fields {
			if !recipe.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != recipe.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Slug(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldSlug,
		})
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldName,
		})
	}
	if value, ok := ruo.mutation.Ingredientslist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldIngredientslist,
		})
	}
	if value, ok := ruo.mutation.Instructions(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldInstructions,
		})
	}
	if value, ok := ruo.mutation.Nutrition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldNutrition,
		})
	}
	if value, ok := ruo.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: recipe.FieldUser,
		})
	}
	if value, ok := ruo.mutation.Servings(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recipe.FieldServings,
		})
	}
	if value, ok := ruo.mutation.AddedServings(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: recipe.FieldServings,
		})
	}
	if ruo.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.IngredientsTable,
			Columns: recipe.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ingredient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedIngredientsIDs(); len(nodes) > 0 && !ruo.mutation.IngredientsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.IngredientsTable,
			Columns: recipe.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ingredient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.IngredientsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   recipe.IngredientsTable,
			Columns: recipe.IngredientsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ingredient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Recipe{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recipe.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
