// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"adomeit.xyz/recipe/ent/ingredient"
	"adomeit.xyz/recipe/ent/predicate"
	"adomeit.xyz/recipe/ent/recipe"
	"adomeit.xyz/recipe/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeIngredient = "Ingredient"
	TypeRecipe     = "Recipe"
	TypeUser       = "User"
)

// IngredientMutation represents an operation that mutates the Ingredient nodes in the graph.
type IngredientMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	calories         *float32
	addcalories      *float32
	fat              *float32
	addfat           *float32
	carbohydrates    *float32
	addcarbohydrates *float32
	protein          *float32
	addprotein       *float32
	clearedFields    map[string]struct{}
	recipe           map[int]struct{}
	removedrecipe    map[int]struct{}
	clearedrecipe    bool
	done             bool
	oldValue         func(context.Context) (*Ingredient, error)
	predicates       []predicate.Ingredient
}

var _ ent.Mutation = (*IngredientMutation)(nil)

// ingredientOption allows management of the mutation configuration using functional options.
type ingredientOption func(*IngredientMutation)

// newIngredientMutation creates new mutation for the Ingredient entity.
func newIngredientMutation(c config, op Op, opts ...ingredientOption) *IngredientMutation {
	m := &IngredientMutation{
		config:        c,
		op:            op,
		typ:           TypeIngredient,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIngredientID sets the ID field of the mutation.
func withIngredientID(id int) ingredientOption {
	return func(m *IngredientMutation) {
		var (
			err   error
			once  sync.Once
			value *Ingredient
		)
		m.oldValue = func(ctx context.Context) (*Ingredient, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ingredient.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIngredient sets the old Ingredient of the mutation.
func withIngredient(node *Ingredient) ingredientOption {
	return func(m *IngredientMutation) {
		m.oldValue = func(context.Context) (*Ingredient, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IngredientMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IngredientMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Ingredient entities.
func (m *IngredientMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IngredientMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *IngredientMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IngredientMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Ingredient entity.
// If the Ingredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IngredientMutation) ResetName() {
	m.name = nil
}

// SetCalories sets the "calories" field.
func (m *IngredientMutation) SetCalories(f float32) {
	m.calories = &f
	m.addcalories = nil
}

// Calories returns the value of the "calories" field in the mutation.
func (m *IngredientMutation) Calories() (r float32, exists bool) {
	v := m.calories
	if v == nil {
		return
	}
	return *v, true
}

// OldCalories returns the old "calories" field's value of the Ingredient entity.
// If the Ingredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientMutation) OldCalories(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCalories is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCalories requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCalories: %w", err)
	}
	return oldValue.Calories, nil
}

// AddCalories adds f to the "calories" field.
func (m *IngredientMutation) AddCalories(f float32) {
	if m.addcalories != nil {
		*m.addcalories += f
	} else {
		m.addcalories = &f
	}
}

// AddedCalories returns the value that was added to the "calories" field in this mutation.
func (m *IngredientMutation) AddedCalories() (r float32, exists bool) {
	v := m.addcalories
	if v == nil {
		return
	}
	return *v, true
}

// ResetCalories resets all changes to the "calories" field.
func (m *IngredientMutation) ResetCalories() {
	m.calories = nil
	m.addcalories = nil
}

// SetFat sets the "fat" field.
func (m *IngredientMutation) SetFat(f float32) {
	m.fat = &f
	m.addfat = nil
}

// Fat returns the value of the "fat" field in the mutation.
func (m *IngredientMutation) Fat() (r float32, exists bool) {
	v := m.fat
	if v == nil {
		return
	}
	return *v, true
}

// OldFat returns the old "fat" field's value of the Ingredient entity.
// If the Ingredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientMutation) OldFat(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFat: %w", err)
	}
	return oldValue.Fat, nil
}

// AddFat adds f to the "fat" field.
func (m *IngredientMutation) AddFat(f float32) {
	if m.addfat != nil {
		*m.addfat += f
	} else {
		m.addfat = &f
	}
}

// AddedFat returns the value that was added to the "fat" field in this mutation.
func (m *IngredientMutation) AddedFat() (r float32, exists bool) {
	v := m.addfat
	if v == nil {
		return
	}
	return *v, true
}

// ResetFat resets all changes to the "fat" field.
func (m *IngredientMutation) ResetFat() {
	m.fat = nil
	m.addfat = nil
}

// SetCarbohydrates sets the "carbohydrates" field.
func (m *IngredientMutation) SetCarbohydrates(f float32) {
	m.carbohydrates = &f
	m.addcarbohydrates = nil
}

// Carbohydrates returns the value of the "carbohydrates" field in the mutation.
func (m *IngredientMutation) Carbohydrates() (r float32, exists bool) {
	v := m.carbohydrates
	if v == nil {
		return
	}
	return *v, true
}

// OldCarbohydrates returns the old "carbohydrates" field's value of the Ingredient entity.
// If the Ingredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientMutation) OldCarbohydrates(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCarbohydrates is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCarbohydrates requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCarbohydrates: %w", err)
	}
	return oldValue.Carbohydrates, nil
}

// AddCarbohydrates adds f to the "carbohydrates" field.
func (m *IngredientMutation) AddCarbohydrates(f float32) {
	if m.addcarbohydrates != nil {
		*m.addcarbohydrates += f
	} else {
		m.addcarbohydrates = &f
	}
}

// AddedCarbohydrates returns the value that was added to the "carbohydrates" field in this mutation.
func (m *IngredientMutation) AddedCarbohydrates() (r float32, exists bool) {
	v := m.addcarbohydrates
	if v == nil {
		return
	}
	return *v, true
}

// ResetCarbohydrates resets all changes to the "carbohydrates" field.
func (m *IngredientMutation) ResetCarbohydrates() {
	m.carbohydrates = nil
	m.addcarbohydrates = nil
}

// SetProtein sets the "protein" field.
func (m *IngredientMutation) SetProtein(f float32) {
	m.protein = &f
	m.addprotein = nil
}

// Protein returns the value of the "protein" field in the mutation.
func (m *IngredientMutation) Protein() (r float32, exists bool) {
	v := m.protein
	if v == nil {
		return
	}
	return *v, true
}

// OldProtein returns the old "protein" field's value of the Ingredient entity.
// If the Ingredient object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IngredientMutation) OldProtein(ctx context.Context) (v float32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProtein is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProtein requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProtein: %w", err)
	}
	return oldValue.Protein, nil
}

// AddProtein adds f to the "protein" field.
func (m *IngredientMutation) AddProtein(f float32) {
	if m.addprotein != nil {
		*m.addprotein += f
	} else {
		m.addprotein = &f
	}
}

// AddedProtein returns the value that was added to the "protein" field in this mutation.
func (m *IngredientMutation) AddedProtein() (r float32, exists bool) {
	v := m.addprotein
	if v == nil {
		return
	}
	return *v, true
}

// ResetProtein resets all changes to the "protein" field.
func (m *IngredientMutation) ResetProtein() {
	m.protein = nil
	m.addprotein = nil
}

// AddRecipeIDs adds the "recipe" edge to the Recipe entity by ids.
func (m *IngredientMutation) AddRecipeIDs(ids ...int) {
	if m.recipe == nil {
		m.recipe = make(map[int]struct{})
	}
	for i := range ids {
		m.recipe[ids[i]] = struct{}{}
	}
}

// ClearRecipe clears the "recipe" edge to the Recipe entity.
func (m *IngredientMutation) ClearRecipe() {
	m.clearedrecipe = true
}

// RecipeCleared reports if the "recipe" edge to the Recipe entity was cleared.
func (m *IngredientMutation) RecipeCleared() bool {
	return m.clearedrecipe
}

// RemoveRecipeIDs removes the "recipe" edge to the Recipe entity by IDs.
func (m *IngredientMutation) RemoveRecipeIDs(ids ...int) {
	if m.removedrecipe == nil {
		m.removedrecipe = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.recipe, ids[i])
		m.removedrecipe[ids[i]] = struct{}{}
	}
}

// RemovedRecipe returns the removed IDs of the "recipe" edge to the Recipe entity.
func (m *IngredientMutation) RemovedRecipeIDs() (ids []int) {
	for id := range m.removedrecipe {
		ids = append(ids, id)
	}
	return
}

// RecipeIDs returns the "recipe" edge IDs in the mutation.
func (m *IngredientMutation) RecipeIDs() (ids []int) {
	for id := range m.recipe {
		ids = append(ids, id)
	}
	return
}

// ResetRecipe resets all changes to the "recipe" edge.
func (m *IngredientMutation) ResetRecipe() {
	m.recipe = nil
	m.clearedrecipe = false
	m.removedrecipe = nil
}

// Where appends a list predicates to the IngredientMutation builder.
func (m *IngredientMutation) Where(ps ...predicate.Ingredient) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *IngredientMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ingredient).
func (m *IngredientMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IngredientMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, ingredient.FieldName)
	}
	if m.calories != nil {
		fields = append(fields, ingredient.FieldCalories)
	}
	if m.fat != nil {
		fields = append(fields, ingredient.FieldFat)
	}
	if m.carbohydrates != nil {
		fields = append(fields, ingredient.FieldCarbohydrates)
	}
	if m.protein != nil {
		fields = append(fields, ingredient.FieldProtein)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IngredientMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ingredient.FieldName:
		return m.Name()
	case ingredient.FieldCalories:
		return m.Calories()
	case ingredient.FieldFat:
		return m.Fat()
	case ingredient.FieldCarbohydrates:
		return m.Carbohydrates()
	case ingredient.FieldProtein:
		return m.Protein()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IngredientMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ingredient.FieldName:
		return m.OldName(ctx)
	case ingredient.FieldCalories:
		return m.OldCalories(ctx)
	case ingredient.FieldFat:
		return m.OldFat(ctx)
	case ingredient.FieldCarbohydrates:
		return m.OldCarbohydrates(ctx)
	case ingredient.FieldProtein:
		return m.OldProtein(ctx)
	}
	return nil, fmt.Errorf("unknown Ingredient field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ingredient.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case ingredient.FieldCalories:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCalories(v)
		return nil
	case ingredient.FieldFat:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFat(v)
		return nil
	case ingredient.FieldCarbohydrates:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCarbohydrates(v)
		return nil
	case ingredient.FieldProtein:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProtein(v)
		return nil
	}
	return fmt.Errorf("unknown Ingredient field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IngredientMutation) AddedFields() []string {
	var fields []string
	if m.addcalories != nil {
		fields = append(fields, ingredient.FieldCalories)
	}
	if m.addfat != nil {
		fields = append(fields, ingredient.FieldFat)
	}
	if m.addcarbohydrates != nil {
		fields = append(fields, ingredient.FieldCarbohydrates)
	}
	if m.addprotein != nil {
		fields = append(fields, ingredient.FieldProtein)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IngredientMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ingredient.FieldCalories:
		return m.AddedCalories()
	case ingredient.FieldFat:
		return m.AddedFat()
	case ingredient.FieldCarbohydrates:
		return m.AddedCarbohydrates()
	case ingredient.FieldProtein:
		return m.AddedProtein()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IngredientMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ingredient.FieldCalories:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCalories(v)
		return nil
	case ingredient.FieldFat:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFat(v)
		return nil
	case ingredient.FieldCarbohydrates:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCarbohydrates(v)
		return nil
	case ingredient.FieldProtein:
		v, ok := value.(float32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddProtein(v)
		return nil
	}
	return fmt.Errorf("unknown Ingredient numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IngredientMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IngredientMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IngredientMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ingredient nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IngredientMutation) ResetField(name string) error {
	switch name {
	case ingredient.FieldName:
		m.ResetName()
		return nil
	case ingredient.FieldCalories:
		m.ResetCalories()
		return nil
	case ingredient.FieldFat:
		m.ResetFat()
		return nil
	case ingredient.FieldCarbohydrates:
		m.ResetCarbohydrates()
		return nil
	case ingredient.FieldProtein:
		m.ResetProtein()
		return nil
	}
	return fmt.Errorf("unknown Ingredient field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IngredientMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.recipe != nil {
		edges = append(edges, ingredient.EdgeRecipe)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IngredientMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ingredient.EdgeRecipe:
		ids := make([]ent.Value, 0, len(m.recipe))
		for id := range m.recipe {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IngredientMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrecipe != nil {
		edges = append(edges, ingredient.EdgeRecipe)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IngredientMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ingredient.EdgeRecipe:
		ids := make([]ent.Value, 0, len(m.removedrecipe))
		for id := range m.removedrecipe {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IngredientMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrecipe {
		edges = append(edges, ingredient.EdgeRecipe)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IngredientMutation) EdgeCleared(name string) bool {
	switch name {
	case ingredient.EdgeRecipe:
		return m.clearedrecipe
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IngredientMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Ingredient unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IngredientMutation) ResetEdge(name string) error {
	switch name {
	case ingredient.EdgeRecipe:
		m.ResetRecipe()
		return nil
	}
	return fmt.Errorf("unknown Ingredient edge %s", name)
}

// RecipeMutation represents an operation that mutates the Recipe nodes in the graph.
type RecipeMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	slug               *string
	name               *string
	ingredientslist    *string
	instructions       *string
	nutrition          *string
	servings           *int
	addservings        *int
	clearedFields      map[string]struct{}
	ingredients        map[int]struct{}
	removedingredients map[int]struct{}
	clearedingredients bool
	done               bool
	oldValue           func(context.Context) (*Recipe, error)
	predicates         []predicate.Recipe
}

var _ ent.Mutation = (*RecipeMutation)(nil)

// recipeOption allows management of the mutation configuration using functional options.
type recipeOption func(*RecipeMutation)

// newRecipeMutation creates new mutation for the Recipe entity.
func newRecipeMutation(c config, op Op, opts ...recipeOption) *RecipeMutation {
	m := &RecipeMutation{
		config:        c,
		op:            op,
		typ:           TypeRecipe,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecipeID sets the ID field of the mutation.
func withRecipeID(id int) recipeOption {
	return func(m *RecipeMutation) {
		var (
			err   error
			once  sync.Once
			value *Recipe
		)
		m.oldValue = func(ctx context.Context) (*Recipe, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Recipe.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecipe sets the old Recipe of the mutation.
func withRecipe(node *Recipe) recipeOption {
	return func(m *RecipeMutation) {
		m.oldValue = func(context.Context) (*Recipe, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecipeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecipeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Recipe entities.
func (m *RecipeMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *RecipeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSlug sets the "slug" field.
func (m *RecipeMutation) SetSlug(s string) {
	m.slug = &s
}

// Slug returns the value of the "slug" field in the mutation.
func (m *RecipeMutation) Slug() (r string, exists bool) {
	v := m.slug
	if v == nil {
		return
	}
	return *v, true
}

// OldSlug returns the old "slug" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSlug: %w", err)
	}
	return oldValue.Slug, nil
}

// ResetSlug resets all changes to the "slug" field.
func (m *RecipeMutation) ResetSlug() {
	m.slug = nil
}

// SetName sets the "name" field.
func (m *RecipeMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RecipeMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RecipeMutation) ResetName() {
	m.name = nil
}

// SetIngredientslist sets the "ingredientslist" field.
func (m *RecipeMutation) SetIngredientslist(s string) {
	m.ingredientslist = &s
}

// Ingredientslist returns the value of the "ingredientslist" field in the mutation.
func (m *RecipeMutation) Ingredientslist() (r string, exists bool) {
	v := m.ingredientslist
	if v == nil {
		return
	}
	return *v, true
}

// OldIngredientslist returns the old "ingredientslist" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldIngredientslist(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIngredientslist is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIngredientslist requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIngredientslist: %w", err)
	}
	return oldValue.Ingredientslist, nil
}

// ResetIngredientslist resets all changes to the "ingredientslist" field.
func (m *RecipeMutation) ResetIngredientslist() {
	m.ingredientslist = nil
}

// SetInstructions sets the "instructions" field.
func (m *RecipeMutation) SetInstructions(s string) {
	m.instructions = &s
}

// Instructions returns the value of the "instructions" field in the mutation.
func (m *RecipeMutation) Instructions() (r string, exists bool) {
	v := m.instructions
	if v == nil {
		return
	}
	return *v, true
}

// OldInstructions returns the old "instructions" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldInstructions(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldInstructions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldInstructions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInstructions: %w", err)
	}
	return oldValue.Instructions, nil
}

// ResetInstructions resets all changes to the "instructions" field.
func (m *RecipeMutation) ResetInstructions() {
	m.instructions = nil
}

// SetNutrition sets the "nutrition" field.
func (m *RecipeMutation) SetNutrition(s string) {
	m.nutrition = &s
}

// Nutrition returns the value of the "nutrition" field in the mutation.
func (m *RecipeMutation) Nutrition() (r string, exists bool) {
	v := m.nutrition
	if v == nil {
		return
	}
	return *v, true
}

// OldNutrition returns the old "nutrition" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldNutrition(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldNutrition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldNutrition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNutrition: %w", err)
	}
	return oldValue.Nutrition, nil
}

// ResetNutrition resets all changes to the "nutrition" field.
func (m *RecipeMutation) ResetNutrition() {
	m.nutrition = nil
}

// SetServings sets the "servings" field.
func (m *RecipeMutation) SetServings(i int) {
	m.servings = &i
	m.addservings = nil
}

// Servings returns the value of the "servings" field in the mutation.
func (m *RecipeMutation) Servings() (r int, exists bool) {
	v := m.servings
	if v == nil {
		return
	}
	return *v, true
}

// OldServings returns the old "servings" field's value of the Recipe entity.
// If the Recipe object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecipeMutation) OldServings(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldServings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldServings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldServings: %w", err)
	}
	return oldValue.Servings, nil
}

// AddServings adds i to the "servings" field.
func (m *RecipeMutation) AddServings(i int) {
	if m.addservings != nil {
		*m.addservings += i
	} else {
		m.addservings = &i
	}
}

// AddedServings returns the value that was added to the "servings" field in this mutation.
func (m *RecipeMutation) AddedServings() (r int, exists bool) {
	v := m.addservings
	if v == nil {
		return
	}
	return *v, true
}

// ResetServings resets all changes to the "servings" field.
func (m *RecipeMutation) ResetServings() {
	m.servings = nil
	m.addservings = nil
}

// AddIngredientIDs adds the "ingredients" edge to the Ingredient entity by ids.
func (m *RecipeMutation) AddIngredientIDs(ids ...int) {
	if m.ingredients == nil {
		m.ingredients = make(map[int]struct{})
	}
	for i := range ids {
		m.ingredients[ids[i]] = struct{}{}
	}
}

// ClearIngredients clears the "ingredients" edge to the Ingredient entity.
func (m *RecipeMutation) ClearIngredients() {
	m.clearedingredients = true
}

// IngredientsCleared reports if the "ingredients" edge to the Ingredient entity was cleared.
func (m *RecipeMutation) IngredientsCleared() bool {
	return m.clearedingredients
}

// RemoveIngredientIDs removes the "ingredients" edge to the Ingredient entity by IDs.
func (m *RecipeMutation) RemoveIngredientIDs(ids ...int) {
	if m.removedingredients == nil {
		m.removedingredients = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.ingredients, ids[i])
		m.removedingredients[ids[i]] = struct{}{}
	}
}

// RemovedIngredients returns the removed IDs of the "ingredients" edge to the Ingredient entity.
func (m *RecipeMutation) RemovedIngredientsIDs() (ids []int) {
	for id := range m.removedingredients {
		ids = append(ids, id)
	}
	return
}

// IngredientsIDs returns the "ingredients" edge IDs in the mutation.
func (m *RecipeMutation) IngredientsIDs() (ids []int) {
	for id := range m.ingredients {
		ids = append(ids, id)
	}
	return
}

// ResetIngredients resets all changes to the "ingredients" edge.
func (m *RecipeMutation) ResetIngredients() {
	m.ingredients = nil
	m.clearedingredients = false
	m.removedingredients = nil
}

// Where appends a list predicates to the RecipeMutation builder.
func (m *RecipeMutation) Where(ps ...predicate.Recipe) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *RecipeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Recipe).
func (m *RecipeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecipeMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.slug != nil {
		fields = append(fields, recipe.FieldSlug)
	}
	if m.name != nil {
		fields = append(fields, recipe.FieldName)
	}
	if m.ingredientslist != nil {
		fields = append(fields, recipe.FieldIngredientslist)
	}
	if m.instructions != nil {
		fields = append(fields, recipe.FieldInstructions)
	}
	if m.nutrition != nil {
		fields = append(fields, recipe.FieldNutrition)
	}
	if m.servings != nil {
		fields = append(fields, recipe.FieldServings)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecipeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case recipe.FieldSlug:
		return m.Slug()
	case recipe.FieldName:
		return m.Name()
	case recipe.FieldIngredientslist:
		return m.Ingredientslist()
	case recipe.FieldInstructions:
		return m.Instructions()
	case recipe.FieldNutrition:
		return m.Nutrition()
	case recipe.FieldServings:
		return m.Servings()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecipeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case recipe.FieldSlug:
		return m.OldSlug(ctx)
	case recipe.FieldName:
		return m.OldName(ctx)
	case recipe.FieldIngredientslist:
		return m.OldIngredientslist(ctx)
	case recipe.FieldInstructions:
		return m.OldInstructions(ctx)
	case recipe.FieldNutrition:
		return m.OldNutrition(ctx)
	case recipe.FieldServings:
		return m.OldServings(ctx)
	}
	return nil, fmt.Errorf("unknown Recipe field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case recipe.FieldSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSlug(v)
		return nil
	case recipe.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case recipe.FieldIngredientslist:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIngredientslist(v)
		return nil
	case recipe.FieldInstructions:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInstructions(v)
		return nil
	case recipe.FieldNutrition:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNutrition(v)
		return nil
	case recipe.FieldServings:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetServings(v)
		return nil
	}
	return fmt.Errorf("unknown Recipe field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecipeMutation) AddedFields() []string {
	var fields []string
	if m.addservings != nil {
		fields = append(fields, recipe.FieldServings)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecipeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case recipe.FieldServings:
		return m.AddedServings()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecipeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case recipe.FieldServings:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddServings(v)
		return nil
	}
	return fmt.Errorf("unknown Recipe numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecipeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecipeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecipeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Recipe nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecipeMutation) ResetField(name string) error {
	switch name {
	case recipe.FieldSlug:
		m.ResetSlug()
		return nil
	case recipe.FieldName:
		m.ResetName()
		return nil
	case recipe.FieldIngredientslist:
		m.ResetIngredientslist()
		return nil
	case recipe.FieldInstructions:
		m.ResetInstructions()
		return nil
	case recipe.FieldNutrition:
		m.ResetNutrition()
		return nil
	case recipe.FieldServings:
		m.ResetServings()
		return nil
	}
	return fmt.Errorf("unknown Recipe field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecipeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.ingredients != nil {
		edges = append(edges, recipe.EdgeIngredients)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecipeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recipe.EdgeIngredients:
		ids := make([]ent.Value, 0, len(m.ingredients))
		for id := range m.ingredients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecipeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedingredients != nil {
		edges = append(edges, recipe.EdgeIngredients)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecipeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case recipe.EdgeIngredients:
		ids := make([]ent.Value, 0, len(m.removedingredients))
		for id := range m.removedingredients {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecipeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedingredients {
		edges = append(edges, recipe.EdgeIngredients)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecipeMutation) EdgeCleared(name string) bool {
	switch name {
	case recipe.EdgeIngredients:
		return m.clearedingredients
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecipeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Recipe unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecipeMutation) ResetEdge(name string) error {
	switch name {
	case recipe.EdgeIngredients:
		m.ResetIngredients()
		return nil
	}
	return fmt.Errorf("unknown Recipe edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *int
	username      *string
	email         *string
	password      *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
