// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"adomeit.xyz/recipe/ent/ingredient"
	"adomeit.xyz/recipe/ent/recipe"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IngredientCreate is the builder for creating a Ingredient entity.
type IngredientCreate struct {
	config
	mutation *IngredientMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ic *IngredientCreate) SetName(s string) *IngredientCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetCalories sets the "calories" field.
func (ic *IngredientCreate) SetCalories(f float32) *IngredientCreate {
	ic.mutation.SetCalories(f)
	return ic
}

// SetFat sets the "fat" field.
func (ic *IngredientCreate) SetFat(f float32) *IngredientCreate {
	ic.mutation.SetFat(f)
	return ic
}

// SetCarbohydrates sets the "carbohydrates" field.
func (ic *IngredientCreate) SetCarbohydrates(f float32) *IngredientCreate {
	ic.mutation.SetCarbohydrates(f)
	return ic
}

// SetProtein sets the "protein" field.
func (ic *IngredientCreate) SetProtein(f float32) *IngredientCreate {
	ic.mutation.SetProtein(f)
	return ic
}

// SetID sets the "id" field.
func (ic *IngredientCreate) SetID(i int) *IngredientCreate {
	ic.mutation.SetID(i)
	return ic
}

// AddRecipeIDs adds the "recipe" edge to the Recipe entity by IDs.
func (ic *IngredientCreate) AddRecipeIDs(ids ...int) *IngredientCreate {
	ic.mutation.AddRecipeIDs(ids...)
	return ic
}

// AddRecipe adds the "recipe" edges to the Recipe entity.
func (ic *IngredientCreate) AddRecipe(r ...*Recipe) *IngredientCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ic.AddRecipeIDs(ids...)
}

// Mutation returns the IngredientMutation object of the builder.
func (ic *IngredientCreate) Mutation() *IngredientMutation {
	return ic.mutation
}

// Save creates the Ingredient in the database.
func (ic *IngredientCreate) Save(ctx context.Context) (*Ingredient, error) {
	var (
		err  error
		node *Ingredient
	)
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IngredientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IngredientCreate) SaveX(ctx context.Context) *Ingredient {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IngredientCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IngredientCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IngredientCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := ingredient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Calories(); !ok {
		return &ValidationError{Name: "calories", err: errors.New(`ent: missing required field "calories"`)}
	}
	if _, ok := ic.mutation.Fat(); !ok {
		return &ValidationError{Name: "fat", err: errors.New(`ent: missing required field "fat"`)}
	}
	if _, ok := ic.mutation.Carbohydrates(); !ok {
		return &ValidationError{Name: "carbohydrates", err: errors.New(`ent: missing required field "carbohydrates"`)}
	}
	if _, ok := ic.mutation.Protein(); !ok {
		return &ValidationError{Name: "protein", err: errors.New(`ent: missing required field "protein"`)}
	}
	return nil
}

func (ic *IngredientCreate) sqlSave(ctx context.Context) (*Ingredient, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _node.ID == 0 {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ic *IngredientCreate) createSpec() (*Ingredient, *sqlgraph.CreateSpec) {
	var (
		_node = &Ingredient{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ingredient.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ingredient.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ingredient.FieldName,
		})
		_node.Name = value
	}
	if value, ok := ic.mutation.Calories(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCalories,
		})
		_node.Calories = value
	}
	if value, ok := ic.mutation.Fat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldFat,
		})
		_node.Fat = value
	}
	if value, ok := ic.mutation.Carbohydrates(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCarbohydrates,
		})
		_node.Carbohydrates = value
	}
	if value, ok := ic.mutation.Protein(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldProtein,
		})
		_node.Protein = value
	}
	if nodes := ic.mutation.RecipeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ingredient.RecipeTable,
			Columns: ingredient.RecipePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recipe.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IngredientCreateBulk is the builder for creating many Ingredient entities in bulk.
type IngredientCreateBulk struct {
	config
	builders []*IngredientCreate
}

// Save creates the Ingredient entities in the database.
func (icb *IngredientCreateBulk) Save(ctx context.Context) ([]*Ingredient, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Ingredient, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IngredientMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IngredientCreateBulk) SaveX(ctx context.Context) []*Ingredient {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IngredientCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IngredientCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
