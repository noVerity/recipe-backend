// Code generated by entc, DO NOT EDIT.

package recipe

const (
	// Label holds the string label denoting the recipe type in the database.
	Label = "recipe"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSlug holds the string denoting the slug field in the database.
	FieldSlug = "slug"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIngredientslist holds the string denoting the ingredientslist field in the database.
	FieldIngredientslist = "ingredientslist"
	// FieldInstructions holds the string denoting the instructions field in the database.
	FieldInstructions = "instructions"
	// FieldNutrition holds the string denoting the nutrition field in the database.
	FieldNutrition = "nutrition"
	// FieldServings holds the string denoting the servings field in the database.
	FieldServings = "servings"
	// EdgeIngredients holds the string denoting the ingredients edge name in mutations.
	EdgeIngredients = "ingredients"
	// Table holds the table name of the recipe in the database.
	Table = "recipes"
	// IngredientsTable is the table that holds the ingredients relation/edge. The primary key declared below.
	IngredientsTable = "recipe_ingredients"
	// IngredientsInverseTable is the table name for the Ingredient entity.
	// It exists in this package in order to avoid circular dependency with the "ingredient" package.
	IngredientsInverseTable = "ingredients"
)

// Columns holds all SQL columns for recipe fields.
var Columns = []string{
	FieldID,
	FieldSlug,
	FieldName,
	FieldIngredientslist,
	FieldInstructions,
	FieldNutrition,
	FieldServings,
}

var (
	// IngredientsPrimaryKey and IngredientsColumn2 are the table columns denoting the
	// primary key for the ingredients relation (M2M).
	IngredientsPrimaryKey = []string{"recipe_id", "ingredient_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SlugValidator is a validator for the "slug" field. It is called by the builders before save.
	SlugValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// ServingsValidator is a validator for the "servings" field. It is called by the builders before save.
	ServingsValidator func(int) error
)
