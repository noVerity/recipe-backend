// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"adomeit.xyz/recipe/ent/recipe"
	"entgo.io/ent/dialect/sql"
)

// Recipe is the model entity for the Recipe schema.
type Recipe struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Ingredientslist holds the value of the "ingredientslist" field.
	Ingredientslist string `json:"ingredientslist,omitempty"`
	// Instructions holds the value of the "instructions" field.
	Instructions string `json:"instructions,omitempty"`
	// Nutrition holds the value of the "nutrition" field.
	Nutrition string `json:"nutrition,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Servings holds the value of the "servings" field.
	Servings int `json:"servings,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RecipeQuery when eager-loading is set.
	Edges RecipeEdges `json:"edges"`
}

// RecipeEdges holds the relations/edges for other nodes in the graph.
type RecipeEdges struct {
	// Ingredients holds the value of the ingredients edge.
	Ingredients []*Ingredient `json:"ingredients,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IngredientsOrErr returns the Ingredients value or an error if the edge
// was not loaded in eager-loading.
func (e RecipeEdges) IngredientsOrErr() ([]*Ingredient, error) {
	if e.loadedTypes[0] {
		return e.Ingredients, nil
	}
	return nil, &NotLoadedError{edge: "ingredients"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Recipe) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case recipe.FieldServings:
			values[i] = new(sql.NullInt64)
		case recipe.FieldID, recipe.FieldSlug, recipe.FieldName, recipe.FieldIngredientslist, recipe.FieldInstructions, recipe.FieldNutrition, recipe.FieldUser:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Recipe", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Recipe fields.
func (r *Recipe) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case recipe.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case recipe.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				r.Slug = value.String
			}
		case recipe.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case recipe.FieldIngredientslist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ingredientslist", values[i])
			} else if value.Valid {
				r.Ingredientslist = value.String
			}
		case recipe.FieldInstructions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instructions", values[i])
			} else if value.Valid {
				r.Instructions = value.String
			}
		case recipe.FieldNutrition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nutrition", values[i])
			} else if value.Valid {
				r.Nutrition = value.String
			}
		case recipe.FieldUser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user", values[i])
			} else if value.Valid {
				r.User = value.String
			}
		case recipe.FieldServings:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field servings", values[i])
			} else if value.Valid {
				r.Servings = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryIngredients queries the "ingredients" edge of the Recipe entity.
func (r *Recipe) QueryIngredients() *IngredientQuery {
	return (&RecipeClient{config: r.config}).QueryIngredients(r)
}

// Update returns a builder for updating this Recipe.
// Note that you need to call Recipe.Unwrap() before calling this method if this Recipe
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Recipe) Update() *RecipeUpdateOne {
	return (&RecipeClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Recipe entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Recipe) Unwrap() *Recipe {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Recipe is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Recipe) String() string {
	var builder strings.Builder
	builder.WriteString("Recipe(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", slug=")
	builder.WriteString(r.Slug)
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ingredientslist=")
	builder.WriteString(r.Ingredientslist)
	builder.WriteString(", instructions=")
	builder.WriteString(r.Instructions)
	builder.WriteString(", nutrition=")
	builder.WriteString(r.Nutrition)
	builder.WriteString(", user=")
	builder.WriteString(r.User)
	builder.WriteString(", servings=")
	builder.WriteString(fmt.Sprintf("%v", r.Servings))
	builder.WriteByte(')')
	return builder.String()
}

// Recipes is a parsable slice of Recipe.
type Recipes []*Recipe

func (r Recipes) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
