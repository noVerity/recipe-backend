// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"adomeit.xyz/recipe/ent/ingredient"
	"adomeit.xyz/recipe/ent/predicate"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IngredientUpdate is the builder for updating Ingredient entities.
type IngredientUpdate struct {
	config
	hooks    []Hook
	mutation *IngredientMutation
}

// Where appends a list predicates to the IngredientUpdate builder.
func (iu *IngredientUpdate) Where(ps ...predicate.Ingredient) *IngredientUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *IngredientUpdate) SetName(s string) *IngredientUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetCalories sets the "calories" field.
func (iu *IngredientUpdate) SetCalories(f float32) *IngredientUpdate {
	iu.mutation.ResetCalories()
	iu.mutation.SetCalories(f)
	return iu
}

// AddCalories adds f to the "calories" field.
func (iu *IngredientUpdate) AddCalories(f float32) *IngredientUpdate {
	iu.mutation.AddCalories(f)
	return iu
}

// SetFat sets the "fat" field.
func (iu *IngredientUpdate) SetFat(f float32) *IngredientUpdate {
	iu.mutation.ResetFat()
	iu.mutation.SetFat(f)
	return iu
}

// AddFat adds f to the "fat" field.
func (iu *IngredientUpdate) AddFat(f float32) *IngredientUpdate {
	iu.mutation.AddFat(f)
	return iu
}

// SetCarbohydrates sets the "carbohydrates" field.
func (iu *IngredientUpdate) SetCarbohydrates(f float32) *IngredientUpdate {
	iu.mutation.ResetCarbohydrates()
	iu.mutation.SetCarbohydrates(f)
	return iu
}

// AddCarbohydrates adds f to the "carbohydrates" field.
func (iu *IngredientUpdate) AddCarbohydrates(f float32) *IngredientUpdate {
	iu.mutation.AddCarbohydrates(f)
	return iu
}

// SetProtein sets the "protein" field.
func (iu *IngredientUpdate) SetProtein(f float32) *IngredientUpdate {
	iu.mutation.ResetProtein()
	iu.mutation.SetProtein(f)
	return iu
}

// AddProtein adds f to the "protein" field.
func (iu *IngredientUpdate) AddProtein(f float32) *IngredientUpdate {
	iu.mutation.AddProtein(f)
	return iu
}

// Mutation returns the IngredientMutation object of the builder.
func (iu *IngredientUpdate) Mutation() *IngredientMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IngredientUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IngredientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IngredientUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IngredientUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IngredientUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IngredientUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := ingredient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (iu *IngredientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ingredient.Table,
			Columns: ingredient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ingredient.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ingredient.FieldName,
		})
	}
	if value, ok := iu.mutation.Calories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCalories,
		})
	}
	if value, ok := iu.mutation.AddedCalories(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCalories,
		})
	}
	if value, ok := iu.mutation.Fat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldFat,
		})
	}
	if value, ok := iu.mutation.AddedFat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldFat,
		})
	}
	if value, ok := iu.mutation.Carbohydrates(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCarbohydrates,
		})
	}
	if value, ok := iu.mutation.AddedCarbohydrates(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCarbohydrates,
		})
	}
	if value, ok := iu.mutation.Protein(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldProtein,
		})
	}
	if value, ok := iu.mutation.AddedProtein(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldProtein,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// IngredientUpdateOne is the builder for updating a single Ingredient entity.
type IngredientUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IngredientMutation
}

// SetName sets the "name" field.
func (iuo *IngredientUpdateOne) SetName(s string) *IngredientUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetCalories sets the "calories" field.
func (iuo *IngredientUpdateOne) SetCalories(f float32) *IngredientUpdateOne {
	iuo.mutation.ResetCalories()
	iuo.mutation.SetCalories(f)
	return iuo
}

// AddCalories adds f to the "calories" field.
func (iuo *IngredientUpdateOne) AddCalories(f float32) *IngredientUpdateOne {
	iuo.mutation.AddCalories(f)
	return iuo
}

// SetFat sets the "fat" field.
func (iuo *IngredientUpdateOne) SetFat(f float32) *IngredientUpdateOne {
	iuo.mutation.ResetFat()
	iuo.mutation.SetFat(f)
	return iuo
}

// AddFat adds f to the "fat" field.
func (iuo *IngredientUpdateOne) AddFat(f float32) *IngredientUpdateOne {
	iuo.mutation.AddFat(f)
	return iuo
}

// SetCarbohydrates sets the "carbohydrates" field.
func (iuo *IngredientUpdateOne) SetCarbohydrates(f float32) *IngredientUpdateOne {
	iuo.mutation.ResetCarbohydrates()
	iuo.mutation.SetCarbohydrates(f)
	return iuo
}

// AddCarbohydrates adds f to the "carbohydrates" field.
func (iuo *IngredientUpdateOne) AddCarbohydrates(f float32) *IngredientUpdateOne {
	iuo.mutation.AddCarbohydrates(f)
	return iuo
}

// SetProtein sets the "protein" field.
func (iuo *IngredientUpdateOne) SetProtein(f float32) *IngredientUpdateOne {
	iuo.mutation.ResetProtein()
	iuo.mutation.SetProtein(f)
	return iuo
}

// AddProtein adds f to the "protein" field.
func (iuo *IngredientUpdateOne) AddProtein(f float32) *IngredientUpdateOne {
	iuo.mutation.AddProtein(f)
	return iuo
}

// Mutation returns the IngredientMutation object of the builder.
func (iuo *IngredientUpdateOne) Mutation() *IngredientMutation {
	return iuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IngredientUpdateOne) Select(field string, fields ...string) *IngredientUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Ingredient entity.
func (iuo *IngredientUpdateOne) Save(ctx context.Context) (*Ingredient, error) {
	var (
		err  error
		node *Ingredient
	)
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IngredientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IngredientUpdateOne) SaveX(ctx context.Context) *Ingredient {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IngredientUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IngredientUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IngredientUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := ingredient.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	return nil
}

func (iuo *IngredientUpdateOne) sqlSave(ctx context.Context) (_node *Ingredient, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ingredient.Table,
			Columns: ingredient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ingredient.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Ingredient.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ingredient.FieldID)
		for _, f := range fields {
			if !ingredient.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ingredient.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ingredient.FieldName,
		})
	}
	if value, ok := iuo.mutation.Calories(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCalories,
		})
	}
	if value, ok := iuo.mutation.AddedCalories(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCalories,
		})
	}
	if value, ok := iuo.mutation.Fat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldFat,
		})
	}
	if value, ok := iuo.mutation.AddedFat(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldFat,
		})
	}
	if value, ok := iuo.mutation.Carbohydrates(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCarbohydrates,
		})
	}
	if value, ok := iuo.mutation.AddedCarbohydrates(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldCarbohydrates,
		})
	}
	if value, ok := iuo.mutation.Protein(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldProtein,
		})
	}
	if value, ok := iuo.mutation.AddedProtein(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat32,
			Value:  value,
			Column: ingredient.FieldProtein,
		})
	}
	_node = &Ingredient{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ingredient.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
